# frozen_string_literal: true

module Telegram
  module Commands
    class OwnerCommand < BaseCommand
      def call(*args)
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        unless developer?
          respond_with :message, text: '–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É —Å–∏—Å—Ç–µ–º—ã'
          return
        end

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        case args.size
        when 0
          show_all_projects
        when 1
          handle_single_argument(args.first)
        when 2
          change_project_owner(args[0], args[1])
        else
          show_usage_help
        end
      end

      private

      def show_all_projects
        projects = Project.includes(:memberships)
                          .order(:name)

        if projects.empty?
          respond_with :message, text: '–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤'
          return
        end

        table_data = build_projects_table(projects)
        table = Terminal::Table.new(headings: %w[–ü—Ä–æ–µ–∫—Ç Slug –í–ª–∞–¥–µ–ª–µ—Ü –°—Ç–∞—Ç—É—Å], rows: table_data)

        respond_with :message, text: code(table.to_s), parse_mode: :Markdown
      end

      def handle_single_argument(arg)
        case arg.downcase
        when 'active'
          show_filtered_projects(archived: false)
        when 'archived'
          show_filtered_projects(archived: true)
        when 'orphaned'
          show_orphaned_projects
        when 'search'
          respond_with :message, text: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /owner search {—Ç–µ–∫—Å—Ç_–ø–æ–∏—Å–∫–∞}'
        else
          if arg.start_with?('search ')
            search_term = arg[7..] # –£–¥–∞–ª—è–µ–º 'search '
            search_projects(search_term)
          else
            respond_with :message, text: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä '#{arg}'. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã: active, archived, orphaned, search {—Ç–µ–∫—Å—Ç}"
          end
        end
      end

      def show_filtered_projects(archived:)
        projects = Project.includes(:memberships)
                          .where(active: !archived)
                          .order(:name)

        status_text = archived ? '–∞—Ä—Ö–∏–≤–Ω—ã—Ö' : '–∞–∫—Ç–∏–≤–Ω—ã—Ö'
        if projects.empty?
          respond_with :message, text: "–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç #{status_text} –ø—Ä–æ–µ–∫—Ç–æ–≤"
          return
        end

        table_data = build_projects_table(projects)
        table = Terminal::Table.new(headings: %w[–ü—Ä–æ–µ–∫—Ç Slug –í–ª–∞–¥–µ–ª–µ—Ü], rows: table_data)

        respond_with :message, text: code("#{status_text.capitalize} –ø—Ä–æ–µ–∫—Ç—ã:\n#{table}"), parse_mode: :Markdown
      end

      def show_orphaned_projects
        ownerless_projects = Project.left_joins(:memberships)
                                    .where.not(projects: { id: nil })
                                    .where.not(id: Project.joins(:memberships).where(memberships: { role_cd: 0 }))
                                    .includes(:memberships)
                                    .order(:name)

        if ownerless_projects.empty?
          respond_with :message, text: '–í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –∏–º–µ—é—Ç –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤'
          return
        end

        project_slugs = ownerless_projects.map(&:slug).join(', ')
        respond_with :message, text: "–ü—Ä–æ–µ–∫—Ç—ã –±–µ–∑ –≤–ª–∞–¥–µ–ª—å—Ü–∞ (#{ownerless_projects.size}):\n#{project_slugs}"
      end

      def search_projects(search_term)
        projects = Project.includes(:memberships)
                          .where('name ILIKE ? OR slug ILIKE ?', "%#{search_term}%", "%#{search_term}%")
                          .order(:name)

        if projects.empty?
          respond_with :message, text: "–ü—Ä–æ–µ–∫—Ç—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ '#{search_term}', –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
          return
        end

        table_data = build_projects_table(projects)
        table = Terminal::Table.new(headings: %w[–ü—Ä–æ–µ–∫—Ç Slug –í–ª–∞–¥–µ–ª–µ—Ü], rows: table_data)

        respond_with :message, text: code("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ '#{search_term}':\n#{table}"), parse_mode: :Markdown
      end

      def change_project_owner(project_slug, new_owner_identifier)
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞
        project = Project.find_by(slug: project_slug)
        unless project
          available_projects = Project.pluck(:slug).join(', ')
          respond_with :message, text: "–ü—Ä–æ–µ–∫—Ç '#{project_slug}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã: #{available_projects}"
          return
        end

        # –ü–æ–∏—Å–∫ –Ω–æ–≤–æ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü–∞
        new_owner = find_user_by_identifier(new_owner_identifier)
        unless new_owner
          respond_with :message,
                       text: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '#{new_owner_identifier}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. " \
                             '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ email –∏–ª–∏ Telegram username (@username)'
          return
        end

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—É—â–∏–º –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
        current_owner = find_current_project_owner(project)
        if current_owner == new_owner
          respond_with :message,
                       text: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '#{format_user_info_compact(new_owner)}' " \
                             "—É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –ø—Ä–æ–µ–∫—Ç–∞ '#{project.name}'"
          return
        end

        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–º–µ–Ω—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        ActiveRecord::Base.transaction do
          # –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—É—é —Ä–æ–ª—å owner, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
          project.memberships.where(role_cd: 0).destroy_all

          # –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é membership —Å —Ä–æ–ª—å—é owner
          project.memberships.create!(user: new_owner, role_cd: 0) # owner = 0

          # –ü—Ä–∏—Å–≤–æ–∏—Ç—å —Å—Ç–∞—Ä–æ–º—É –≤–ª–∞–¥–µ–ª—å—Ü—É —Ä–æ–ª—å viewer, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª
          if current_owner
            existing_membership = current_owner.membership_of(project)
            if existing_membership
              existing_membership.update!(role_cd: 1) # viewer = 1
            else
              project.memberships.create!(user: current_owner, role_cd: 1) # viewer = 1
            end
          end

          # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
          Rails.logger.info "Project owner changed: #{project.slug} - old: #{current_owner&.email} - new: #{new_owner.email}"
        end

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        old_owner_info = current_owner ? format_user_info_compact(current_owner) : '–ù–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞'
        new_owner_info = format_user_info_compact(new_owner)

        response_text = <<~TEXT
          ‚úÖ –í–ª–∞–¥–µ–ª–µ—Ü –ø—Ä–æ–µ–∫—Ç–∞ '#{project.name}' –∏–∑–º–µ–Ω–µ–Ω!
          üî∏ –°—Ç–∞—Ä—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü: #{old_owner_info}
          üî∏ –ù–æ–≤—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü: #{new_owner_info}
          #{current_owner ? "üìù –°—Ç–∞—Ä—ã–π –≤–ª–∞–¥–µ–ª–µ—Ü —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç —Ä–æ–ª—å 'viewer'" : ''}
        TEXT

        respond_with :message, text: response_text
      rescue StandardError => e
        Rails.logger.error "Error changing project owner: #{e.message}"
        respond_with :message, text: "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞: #{e.message}"
      end

      def show_usage_help
        help_text = <<~HELP
          üìã *–ö–æ–º–∞–Ω–¥–∞ /owner - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–∞–º–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤*

          *–ü—Ä–æ—Å–º–æ—Ç—Ä –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤:*
          `/owner` - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–æ–µ–∫—Ç—ã –∏ –∏—Ö –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤
          `/owner active` - —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
          `/owner archived` - —Ç–æ–ª—å–∫–æ –∞—Ä—Ö–∏–≤–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
          `/owner orphaned` - –ø—Ä–æ–µ–∫—Ç—ã –±–µ–∑ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤
          `/owner search {—Ç–µ–∫—Å—Ç}` - –ø–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤

          *–°–º–µ–Ω–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞:*
          `/owner {project_slug} {email|@username|user_id}`

          *–ü—Ä–∏–º–µ—Ä—ã:*
          `/owner my-project user@example.com`
          `/owner website @username`
          `/owner app 123`

          ‚ö†Ô∏è *–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É —Å–∏—Å—Ç–µ–º—ã*
        HELP

        respond_with :message, text: help_text, parse_mode: :Markdown
      end

      def build_projects_table(projects)
        projects.map do |project|
          owner = find_project_owner(project)
          status = project.active? ? '–ê–∫—Ç–∏–≤–Ω—ã–π' : '–ê—Ä—Ö–∏–≤–Ω—ã–π'

          [
            truncate_string(project.name, 30),
            project.slug,
            owner,
            status
          ]
        end
      end

      def find_project_owner(project)
        owner_membership = project.memberships.find_by(role_cd: 0) # owner = 0
        return '–ù–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞' unless owner_membership

        user = owner_membership.user
        format_user_info_compact(user)
      end

      def find_current_project_owner(project)
        owner_membership = project.memberships.find_by(role_cd: 0) # owner = 0
        owner_membership&.user
      end

      def find_user_by_identifier(identifier)
        # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –ø–æ email (check for valid email format)
        return User.find_by(email: identifier) if identifier.match?(/\A.+@.+\..+\z/)

        # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –ø–æ telegram username
        clean_identifier = identifier.delete_prefix('@')
        telegram_user = TelegramUser.find_by(username: clean_identifier)
        return telegram_user.user if telegram_user

        # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –ø–æ ID
        return User.find_by(id: identifier.to_i) if identifier.match?(/\A\d+\z/)

        # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –ø–æ –∏–º–µ–Ω–∏
        User.find_by(name: identifier)
      end

      def format_user_info_compact(user)
        parts = []
        parts << user.name if user.name.present?
        parts << user.email if user.email.present?
        parts << "@#{user.telegram_user.username}" if user.telegram_user&.username
        parts.empty? ? "ID: #{user.id}" : parts.join(' ')
      end

      def truncate_string(string, max_length)
        return string if string.length <= max_length

        "#{string[0...max_length - 3]}..."
      end
    end
  end
end
