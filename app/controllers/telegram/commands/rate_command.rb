# frozen_string_literal: true

module Telegram
  module Commands
    class RateCommand < BaseCommand
      def call(data = nil, *)
        return handle_rate_command(data) if data

        # –ï—Å–ª–∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –ø–æ–∫–∞–∂–µ–º —Å–ø—Ä–∞–≤–∫—É
        show_rate_help
      end

      private

      def handle_rate_command(args)
        args = args.split if args.is_a?(String)
        command = args[1]&.downcase

        case command
        when 'list'
          handle_list(args[2])
        when 'remove'
          handle_remove(args[2], args[3])
        when nil
          show_rate_help
        else
          # –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–≤–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ /rate project username amount currency
          handle_set_rate(args[1], args[2], args[3], args[4])
        end
      end

      def handle_set_rate(project_name, username, amount, currency)
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        unless project_name && username && amount
          respond_with :message, text: rate_usage_error
          return
        end

        # –ü–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞
        project = find_project(project_name)
        unless project
          respond_with :message, text: "‚ùå –ü—Ä–æ–µ–∫—Ç '#{project_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã: #{current_user.available_projects.alive.pluck(:slug).join(', ')}"
          return
        end

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        unless can_manage_project_rates?(project)
          respond_with :message, text: "‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞!\n–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –ø—Ä–æ–µ–∫—Ç–∞ –º–æ–∂–µ—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Å—Ç–∞–≤–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤."
          return
        end

        # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        target_user = find_user_by_username(username)
        unless target_user
          respond_with :message, text: "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @#{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ."
          return
        end

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫ –ø—Ä–æ–µ–∫—Ç–∞
        unless project.users.include?(target_user)
          respond_with :message, text: "‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ @#{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø—Ä–æ–µ–∫—Ç–µ '#{project.name}'.\nüí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: /rate list #{project_name}"
          return
        end

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã
        hourly_rate = amount.to_s.tr(',', '.').to_f
        if hourly_rate <= 0
          respond_with :message, text: "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞: #{amount}. –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º."
          return
        end

        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–∞–ª—é—Ç—ã
        currency ||= 'RUB'
        unless MemberRate::CURRENCIES.include?(currency.upcase)
          respond_with :message, text: "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –≤–∞–ª—é—Ç–∞: #{currency}. –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã: #{MemberRate::CURRENCIES.join(', ')}"
          return
        end

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∏
        member_rate = MemberRate.find_or_initialize_by(project: project, user: target_user)
        member_rate.hourly_rate = hourly_rate
        member_rate.currency = currency.upcase

        if member_rate.save
          respond_with :message, text: format_rate_success(project, target_user, member_rate)
        else
          respond_with :message, text: "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏: #{member_rate.errors.full_messages.join(', ')}"
        end
      rescue StandardError => e
        Rails.logger.error "Error in RateCommand: #{e.message}"
        Rails.logger.error e.backtrace.join("\n")
        respond_with :message, text: "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
      end

      def handle_list(project_name)
        unless project_name
          respond_with :message, text: "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: /rate list project_name"
          return
        end

        project = find_project(project_name)
        unless project
          respond_with :message, text: "‚ùå –ü—Ä–æ–µ–∫—Ç '#{project_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω."
          return
        end

        unless can_manage_project_rates?(project)
          respond_with :message, text: "‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞!\n–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –ø—Ä–æ–µ–∫—Ç–∞ –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å—Ç–∞–≤–∫–∏."
          return
        end

        respond_with :message, text: format_project_rates_list(project)
      end

      def handle_remove(project_name, username)
        unless project_name && username
          respond_with :message, text: "‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /rate remove project_name @username"
          return
        end

        project = find_project(project_name)
        unless project
          respond_with :message, text: "‚ùå –ü—Ä–æ–µ–∫—Ç '#{project_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω."
          return
        end

        unless can_manage_project_rates?(project)
          respond_with :message, text: "‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞!\n–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –ø—Ä–æ–µ–∫—Ç–∞ –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —Å—Ç–∞–≤–∫–∏."
          return
        end

        target_user = find_user_by_username(username)
        unless target_user
          respond_with :message, text: "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @#{username} –Ω–µ –Ω–∞–π–¥–µ–Ω."
          return
        end

        member_rate = MemberRate.find_by(project: project, user: target_user)
        unless member_rate
          respond_with :message, text: "‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @#{username} –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å—Ç–∞–≤–∫–∏ –≤ –ø—Ä–æ–µ–∫—Ç–µ '#{project.name}'."
          return
        end

        if member_rate.destroy
          respond_with :message, text: "‚úÖ –°—Ç–∞–≤–∫–∞ @#{username} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ '#{project.name}'."
        else
          respond_with :message, text: "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏."
        end
      end

      def show_rate_help
        help_text = multiline(
          'üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–≤–∫–∞–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞',
          '',
          'üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:',
          '‚Ä¢ /rate project @username amount currency - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–≤–∫—É',
          '‚Ä¢ /rate list project_name - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å—Ç–∞–≤–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞',
          '‚Ä¢ /rate remove project_name @username - —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞–≤–∫—É',
          '',
          'üí° –ü—Ä–∏–º–µ—Ä—ã:',
          '‚Ä¢ /rate Website @john_doe 50 USD',
          '‚Ä¢ /rate MobileApp @mary_smith 3000 RUB',
          '',
          'üîê –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –ø—Ä–æ–µ–∫—Ç–∞ –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ç–∞–≤–∫–∞–º–∏.'
        )
        respond_with :message, text: help_text
      end

      def can_manage_project_rates?(project)
        project.memberships.where(user: current_user, role_cd: 0).exists? # owner role_cd = 0
      end

      def find_user_by_username(username)
        username = username.delete('@')
        User.joins(:telegram_user).find_by(telegram_users: { username: username })
      end

      def format_rate_success(project, user, member_rate)
        multiline(
          '‚úÖ –°—Ç–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!',
          "üìä –ü—Ä–æ–µ–∫—Ç: #{project.name}",
          "üë§ –£—á–∞—Å—Ç–Ω–∏–∫: @#{user.telegram_user.username}",
          "üí∞ –°—É–º–º–∞: #{member_rate.hourly_rate} #{member_rate.currency}",
          "üìÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: #{Time.current.strftime('%d.%m.%Y %H:%M')}"
        )
      end

      def format_project_rates_list(project)
        rates = project.member_rates.includes(:user)
        text = multiline("üí∞ –°—Ç–∞–≤–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ \"#{project.name}\":", nil)

        project.users.each do |user|
          rate = rates.find { |r| r.user_id == user.id }
          rate_text = rate ? "#{rate.hourly_rate} #{rate.currency}" : "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
          membership = project.memberships.find_by(user: user)
          role = membership&.role_cd == 0 ? ' (–í–ª–∞–¥–µ–ª–µ—Ü)' : ''
          username = user.telegram_user&.username || user.id.to_s

          text += "üë§ @#{username}#{role}: #{rate_text}\n"
        end

        text
      end

      def rate_usage_error
        multiline(
          '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.',
          '',
          'üìù –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:',
          '‚Ä¢ /rate project @username amount [currency]',
          '‚Ä¢ /rate list project_name',
          '‚Ä¢ /rate remove project_name @username',
          '',
          'üí° –ü—Ä–∏–º–µ—Ä: /rate Website @john_doe 50 USD'
        )
      end
    end
  end
end