# frozen_string_literal: true

module Telegram
  module UserManagement
    extend ActiveSupport::Concern

    private

    def format_user_info(user)
      telegram_info = if user.telegram_user
                        "**@#{user.telegram_user.username || '–Ω–µ—Ç_–Ω–∏–∫–∞'}** (#{user.telegram_user.name})"
                      else
                        '*Telegram –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω*'
                      end

      email_info = user.email.present? ? "üìß #{user.email}" : 'üìß *Email –Ω–µ —É–∫–∞–∑–∞–Ω*'

      projects_info = if user.projects.any?
                        projects_list = user.projects.map(&:name).join(', ')
                        "üìã –ü—Ä–æ–µ–∫—Ç—ã: #{projects_list}"
                      else
                        'üìã *–ù–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤*'
                      end

      [telegram_info, email_info, projects_info].join("\n")
    end

    def add_user_to_project(project_slug, username, role)
      # Remove @ from username if present
      username = username.delete_prefix('@')

      project = find_project(project_slug)
      unless project
        respond_with :message, text: "–ù–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–æ–µ–∫—Ç '#{project_slug}'. –í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã: #{current_user.available_projects.alive.join(', ')}"
        return
      end

      # Check if current user can manage this project (owner or viewer role)
      membership = current_user.membership_of(project)
      unless membership&.owner?
        respond_with :message, text: "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø—Ä–æ–µ–∫—Ç '#{project.slug}', " \
                                     '—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü (owner) –º–æ–∂–µ—Ç —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å.'
        return
      end

      # Validate role
      role = role.downcase
      unless Membership.roles.keys.include?(role)
        respond_with :message, text: "–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å '#{role}'. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏: #{Membership.roles.keys.join(', ')}"
        return
      end

      # Find user by Telegram username
      telegram_user = TelegramUser.find_by(username: username)

      if telegram_user&.user
        # User exists and is linked to system
        user = telegram_user.user

        # Check if user is already in project
        existing_membership = user.membership_of(project)
        if existing_membership
          respond_with :message, text: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '@#{username}' —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –ø—Ä–æ–µ–∫—Ç–µ '#{project.slug}' " \
                                       "—Å —Ä–æ–ª—å—é #{existing_membership.role}"
          return
        end

        # Add user to project
        user.set_role(role.to_sym, project)
        respond_with :message, text: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '@#{username}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–æ–µ–∫—Ç '#{project.slug}' —Å —Ä–æ–ª—å—é '#{role}'"
      else
        # User not found or not linked - create invitation
        existing_invite = Invite.find_by(telegram_username: username, project: project)
        if existing_invite
          respond_with :message,
                       text: "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '@#{username}' –≤ –ø—Ä–æ–µ–∫—Ç '#{project.slug}' " \
                             "—É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å —Ä–æ–ª—å—é '#{existing_invite.role}'"
          return
        end

        # Create invitation
        Invite.create!(
          user: current_user,
          project: project,
          telegram_username: username,
          role: role
        )

        respond_with :message, text: "–°–æ–∑–¥–∞–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '@#{username}' –≤ –ø—Ä–æ–µ–∫—Ç '#{project.slug}' —Å —Ä–æ–ª—å—é '#{role}'. " \
                                     '–ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—Å—è –∫ –±–æ—Ç—É, –æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–æ–µ–∫—Ç.'
      end
    end

    def find_current_user
      telegram_user.user || User
        .create_with(name: telegram_user.name, nickname: telegram_user.username)
        .find_or_create_by!(telegram_user_id: telegram_user.id)
    end

    def current_user
      return @current_user if defined? @current_user

      @current_user = find_current_user
    end

    def logged_in?
      current_user.present?
    end
  end
end