# frozen_string_literal: true

module TelegramCallbacks
  extend ActiveSupport::Concern

  def callback_query(data)
    edit_message :text, text: "–í—ã –≤—ã–±—Ä–∞–ª–∏ #{data}"
  end

  def select_project_callback_query(project_slug)
    save_context :add_time
    project = find_project project_slug
    self.telegram_session = TelegramSession.add_time(project_id: project.id)
    edit_message :text,
                 text: "–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç #{project.slug}, —Ç–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (12 –¥–µ–ª–∞–ª —Ç–æ-—Ç–æ)"
  end

  def adduser_project_callback_query(project_slug)
    project = find_project(project_slug)
    unless project
      edit_message :text, text: '–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
      return
    end

    # Check permissions - only owners can add users
    membership = current_user.membership_of(project)
    unless membership&.owner?
      edit_message :text, text: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç, —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü (owner) –º–æ–∂–µ—Ç —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å.'
      return
    end

    self.telegram_session = TelegramSession.add_user(project_slug: project_slug)
    save_context :adduser_username_input
    edit_message :text, text: "–ü—Ä–æ–µ–∫—Ç: #{project.name}\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: @username –∏–ª–∏ username):"
  end

  def adduser_username_input(username, *)
    username = username.delete_prefix('@') if username.start_with?('@')
    tg_session = telegram_session
    tg_session[:username] = username
    self.telegram_session = tg_session

    save_context :adduser_role_callback_query
    respond_with :message,
                 text: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @#{username}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
                 reply_markup: {
                   inline_keyboard: [
                     [{ text: '–í–ª–∞–¥–µ–ª–µ—Ü (owner)', callback_data: 'adduser_role:owner' }],
                     [{ text: '–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å (viewer)', callback_data: 'adduser_role:viewer' }],
                     [{ text: '–£—á–∞—Å—Ç–Ω–∏–∫ (member)', callback_data: 'adduser_role:member' }]
                   ]
                 }
  end

  def adduser_role_callback_query(role)
    data = telegram_session_data
    project_slug = data['project_slug']
    username = data['username']

    # Clean up session
    clear_telegram_session

    edit_message :text, text: "–î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @#{username} –≤ –ø—Ä–æ–µ–∫—Ç #{project_slug} —Å —Ä–æ–ª—å—é #{role}..."

    add_user_to_project(project_slug, username, role)
  end

  def add_time(hours, *description)
    data = telegram_session_data
    project = current_user.available_projects.find(data['project_id']) || raise('–ù–µ —É–∫–∞–∑–∞–Ω –ø—Ä–æ–µ–∫—Ç')
    description = description.join(' ')
    project.time_shifts.create!(
      date: Time.zone.today,
      hours: hours.to_s.tr(',', '.').to_f,
      description: description,
      user: current_user
    )

    clear_telegram_session
    respond_with :message, text: "–û—Ç–º–µ—Ç–∏–ª–∏ –≤ #{project.name} #{hours} —á–∞—Å–æ–≤"
  end

  def new_project_slug_input(slug, *)
    if slug.blank?
      respond_with :message, text: 'Slug –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –£–∫–∞–∂–∏—Ç–µ slug –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞:'
      return
    end

    project = current_user.projects.create!(name: slug, slug: slug)
    respond_with :message, text: "–°–æ–∑–¥–∞–Ω –ø—Ä–æ–µ–∫—Ç `#{project.slug}`"
  rescue ActiveRecord::RecordInvalid => e
    respond_with :message, text: "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞: #{e.message}"
  end

  # Edit time shift callbacks
  def edit_select_time_shift_input(time_shift_id, *)
    time_shift = current_user.time_shifts.find_by(id: time_shift_id)

    unless time_shift
      respond_with :message, text: "–ó–∞–ø–∏—Å—å —Å ID #{time_shift_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
      return
    end

    # Check permissions
    unless time_shift.updatable_by?(current_user)
      respond_with :message, text: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏'
      return
    end

    # Save time shift to session using TelegramSession
    self.telegram_session = TelegramSession.edit(
      time_shift_id: time_shift.id
    )

    save_context :edit_field_callback_query

    description = time_shift.description || '(–Ω–µ—Ç)'
    text = "–ó–∞–ø–∏—Å—å ##{time_shift.id}:\n" \
           "–ü—Ä–æ–µ–∫—Ç: #{time_shift.project.name}\n" \
           "–ß–∞—Å—ã: #{time_shift.hours}\n" \
           "–û–ø–∏—Å–∞–Ω–∏–µ: #{description}\n\n" \
           '–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?'

    respond_with :message,
                 text: text,
                 reply_markup: {
                   inline_keyboard: [
                     [{ text: 'üìÅ –ü—Ä–æ–µ–∫—Ç', callback_data: 'edit_field:project' }],
                     [{ text: '‚è∞ –ß–∞—Å—ã', callback_data: 'edit_field:hours' }],
                     [{ text: 'üìù –û–ø–∏—Å–∞–Ω–∏–µ', callback_data: 'edit_field:description' }],
                     [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'edit_field:cancel' }]
                   ]
                 }
  end

  def edit_field_callback_query(field)
    if field == 'cancel'
      clear_telegram_session
      edit_message :text, text: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
      return
    end

    tg_session = telegram_session
    tg_session[:field] = field
    self.telegram_session = tg_session

    case field
    when 'project'
      edit_edit_project
    when 'hours'
      edit_edit_hours
    when 'description'
      edit_edit_description
    end
  end

  def edit_edit_project
    time_shift = edit_time_shift
    return handle_missing_time_shift unless time_shift

    save_context :edit_project_callback_query
    projects = current_user.available_projects.alive

    # Form text with current project name
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç (—Ç–µ–∫—É—â–∏–π: #{time_shift.project.name}):"

    # Build inline keyboard with (—Ç–µ–∫—É—â–∏–π) label for current project
    inline_keyboard = projects.map do |p|
      project_name = p.id == time_shift.project_id ? "#{p.name} (—Ç–µ–∫—É—â–∏–π)" : p.name
      [{ text: project_name, callback_data: "edit_project:#{p.slug}" }]
    end

    edit_message :text,
                 text: text,
                 reply_markup: { inline_keyboard: inline_keyboard }
  end

  def edit_project_callback_query(project_slug)
    project = find_project(project_slug)

    unless project
      edit_message :text, text: '–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
      return
    end

    tg_session = telegram_session
    tg_session[:new_values] = { project_id: project.id }
    self.telegram_session = tg_session
    show_edit_confirmation
  end

  def edit_edit_hours
    save_context :edit_hours_input
    edit_message :text, text: '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 8 –∏–ª–∏ 7.5):'
  end

  def edit_hours_input(hours_str, *)
    hours = hours_str.to_s.tr(',', '.').to_f

    if hours < 0.1
      respond_with :message, text: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 0.1. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:'
      return
    end

    tg_session = telegram_session
    tg_session[:new_values] = { hours: hours }
    self.telegram_session = tg_session
    show_edit_confirmation
  end

  def edit_edit_description
    save_context :edit_description_input
    edit_message :text, text: '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "-" –¥–ª—è –ø—É—Å—Ç–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è):'
  end

  def edit_description_input(description, *)
    description = nil if description == '-'

    if description && description.length > 1000
      respond_with :message, text: '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:'
      return
    end

    tg_session = telegram_session
    tg_session[:new_values] = { description: description }
    self.telegram_session = tg_session
    show_edit_confirmation
  end

  def show_edit_confirmation
    time_shift = edit_time_shift
    return handle_missing_time_shift unless time_shift

    data = telegram_session_data
    field = data['field']
    new_values = data['new_values']

    changes = build_changes_text(time_shift, field, new_values)

    save_context :edit_confirm_callback_query

    respond_with :message,
                 text: "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:\n\n#{changes.join("\n")}\n\n–°–æ—Ö—Ä–∞–Ω–∏—Ç—å?",
                 reply_markup: {
                   inline_keyboard: [
                     [{ text: '‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data: 'edit_confirm:save' }],
                     [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'edit_confirm:cancel' }]
                   ]
                 }
  end

  def edit_confirm_callback_query(action)
    if action == 'cancel'
      clear_telegram_session
      edit_message :text, text: '–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã'
      return
    end

    time_shift = edit_time_shift
    return handle_missing_time_shift unless time_shift

    data = telegram_session_data
    field = data['field']
    new_values = data['new_values']

    case field
    when 'project'
      time_shift.update!(project_id: new_values['project_id'])
    when 'hours'
      time_shift.update!(hours: new_values['hours'])
    when 'description'
      time_shift.update!(description: new_values['description'])
    end

    # Clean up session
    clear_telegram_session

    edit_message :text, text: "‚úÖ –ó–∞–ø–∏—Å—å ##{time_shift.id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!"
  rescue ActiveRecord::RecordInvalid => e
    edit_message :text, text: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: #{e.message}"
  end
end
