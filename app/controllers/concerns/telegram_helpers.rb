# frozen_string_literal: true

module TelegramHelpers
  extend ActiveSupport::Concern

  private

  def parse_time_tracking_message(parts)
    first_part = parts[0]
    second_part = parts[1]
    description = parts[2..].join(' ') if parts.length > 2

    # Check if first part is numeric (hours format)
    if numeric?(first_part)
      hours = first_part
      project_slug = second_part
    elsif numeric?(second_part)
      # Second part is numeric (project_slug hours format)
      project_slug = first_part
      hours = second_part
    else
      return { error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å—ã –∏ –ø—Ä–æ–µ–∫—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: "2.5 project –æ–ø–∏—Å–∞–Ω–∏–µ" –∏–ª–∏ "project 2.5 –æ–ø–∏—Å–∞–Ω–∏–µ"' }
    end

    # Validate project exists
    project = find_project(project_slug)
    unless project
      available_projects = current_user.available_projects.alive.map(&:slug).join(', ')
      return { error: "–ù–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–æ–µ–∫—Ç '#{project_slug}'. –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã: #{available_projects}" }
    end

    { hours: hours, project_slug: project_slug, description: description }
  end

  def numeric?(str)
    return false unless str.is_a?(String)

    str.match?(/\A\d+([.,]\d+)?\z/)
  end

  def add_time_entry(project_slug, hours, description = nil)
    project = find_project(project_slug)

    project.time_shifts.create!(
      date: Time.zone.today,
      hours: hours.to_s.tr(',', '.').to_f,
      description: description || '',
      user: current_user
    )

    respond_with :message, text: "–û—Ç–º–µ—Ç–∏–ª–∏ –≤ #{project.name} #{hours} —á–∞—Å–æ–≤"
  rescue StandardError => e
    respond_with :message, text: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏: #{e.message}"
  end

  def developer?
    return false unless from

    from['id'] == ApplicationConfig.developer_telegram_id
  end

  def format_user_info(user)
    telegram_info = if user.telegram_user
                      "**@#{user.telegram_user.username || '–Ω–µ—Ç_–Ω–∏–∫–∞'}** (#{user.telegram_user.name})"
                    else
                      '*Telegram –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω*'
                    end

    email_info = user.email.present? ? "üìß #{user.email}" : 'üìß *Email –Ω–µ —É–∫–∞–∑–∞–Ω*'

    projects_info = if user.projects.any?
                      projects_list = user.projects.map(&:name).join(', ')
                      "üìã –ü—Ä–æ–µ–∫—Ç—ã: #{projects_list}"
                    else
                      'üìã *–ù–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤*'
                    end

    [telegram_info, email_info, projects_info].join("\n")
  end

  def add_user_to_project(project_slug, username, role)
    # Remove @ from username if present
    username = username.delete_prefix('@')

    project = find_project(project_slug)
    unless project
      respond_with :message, text: "–ù–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–æ–µ–∫—Ç '#{project_slug}'. –í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã: #{current_user.available_projects.alive.join(', ')}"
      return
    end

    # Check if current user can manage this project (owner or viewer role)
    membership = current_user.membership_of(project)
    unless membership&.owner?
      respond_with :message, text: "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ø—Ä–æ–µ–∫—Ç '#{project.slug}', " \
                                   '—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü (owner) –º–æ–∂–µ—Ç —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å.'
      return
    end

    # Validate role
    role = role.downcase
    unless Membership.roles.keys.include?(role)
      respond_with :message, text: "–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å '#{role}'. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏: #{Membership.roles.keys.join(', ')}"
      return
    end

    # Find user by Telegram username
    telegram_user = TelegramUser.find_by(username: username)

    if telegram_user&.user
      # User exists and is linked to system
      user = telegram_user.user

      # Check if user is already in project
      existing_membership = user.membership_of(project)
      if existing_membership
        respond_with :message, text: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '@#{username}' —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –ø—Ä–æ–µ–∫—Ç–µ '#{project.slug}' " \
                                     "—Å —Ä–æ–ª—å—é #{existing_membership.role}"
        return
      end

      # Add user to project
      user.set_role(role.to_sym, project)
      respond_with :message, text: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '@#{username}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–æ–µ–∫—Ç '#{project.slug}' —Å —Ä–æ–ª—å—é '#{role}'"
    else
      # User not found or not linked - create invitation
      existing_invite = Invite.find_by(telegram_username: username, project: project)
      if existing_invite
        respond_with :message,
                     text: "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '@#{username}' –≤ –ø—Ä–æ–µ–∫—Ç '#{project.slug}' " \
                           "—É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å —Ä–æ–ª—å—é '#{existing_invite.role}'"
        return
      end

      # Create invitation
      Invite.create!(
        user: current_user,
        project: project,
        telegram_username: username,
        role: role
      )

      respond_with :message, text: "–°–æ–∑–¥–∞–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '@#{username}' –≤ –ø—Ä–æ–µ–∫—Ç '#{project.slug}' —Å —Ä–æ–ª—å—é '#{role}'. " \
                                   '–ö–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—Å—è –∫ –±–æ—Ç—É, –æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—Ä–æ–µ–∫—Ç.'
    end
  end

  def help_message
    commands = [
      '/help - –≠—Ç–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∞',
      '/version - –í–µ—Ä—Å–∏—è –ú–∞—à–∏',
      '/projects - –°–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤',
      '/attach {projects_slug} - –£–∫–∞–∑–∞—Ç—å –ø—Ä–æ–µ–∫—Ç —ç—Ç–æ–≥–æ —á–∞—Ç–∞',
      '/add {project_slug} {hours} [description] - –û—Ç–º–µ—Ç–∏—Ç—å –≤—Ä–µ–º—è',
      '/edit - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–Ω–µ–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å –≤—Ä–µ–º–µ–Ω–∏',
      '/rename [project_slug] "–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ" - –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤)',
      '/new [project_slug] - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç',
      '/adduser {project_slug} {username} [role] - –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ–µ–∫—Ç (—Ä–æ–ª–∏: owner, viewer, member)',
      '/rate {project} {username} {amount} [currency] - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—á–∞—Å–æ–≤—É—é —Å—Ç–∞–≤–∫—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤)',
      '/rate list {project} - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞–≤–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤)',
      '/rate remove {project} {username} - –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞–≤–∫—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤)',
      '/report - –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –∏ –ø—Ä–æ–µ–∫—Ç–∞–º',
      '/day - –û—Ç—á—ë—Ç –∑–∞ –¥–µ–Ω—å',
      '/rename - –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞',
      '/summary {week|month}- –°—É–º–∞—Ä–Ω—ã–π –æ—Ç—á—ë—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥',
      '/hours [project_slug] - –í—Å–µ —á–∞—Å—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞',
      '',
      '–ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏:',
      '{hours} {project_slug} [description] - –Ω–∞–ø—Ä–∏–º–µ—Ä: "2.5 myproject —Ä–∞–±–æ—Ç–∞–ª –Ω–∞–¥ —Ñ–∏—á–µ–π"',
      '{project_slug} {hours} [description] - –Ω–∞–ø—Ä–∏–º–µ—Ä: "myproject 2.5 —Ä–∞–±–æ—Ç–∞–ª –Ω–∞–¥ —Ñ–∏—á–µ–π"'
    ]

    # Add developer commands if user is developer
    if developer?
      commands << '# –¢–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞'
      commands << '/users - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–∏—Å—Ç–µ–º—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞)'
      commands << '/merge {email} {telegram_username} - –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞)'
    end

    multiline(commands)
  end

  def multiline(*args)
    args.flatten.map(&:to_s).join("\n")
  end

  def generate_start_link
    TelegramVerifier.get_link(
      uid: from['id'],
      nickname: from['username'],
      name: [from['first_name'], from['last_name']].compact.join(' ')
    )
  end

  def current_user
    return @current_user if defined? @current_user

    @current_user = find_current_user
  end

  def find_current_user
    telegram_user.user || User
      .create_with(name: telegram_user.name, nickname: telegram_user.username)
      .find_or_create_by!(telegram_user_id: telegram_user.id)
  end

  def logged_in?
    current_user.present?
  end

  def current_locale
    if from
      # locale for user
      :ru
    elsif chat
      # locale for chat
      :ru
    end
  end

  def code(text)
    multiline '```', text, '```'
  end

  def is_personal_chat?
    chat['id'] == from['id']
  end

  def find_project(key)
    current_user.available_projects.alive.find_by(slug: key)
  end

  def logger
    Rails.application.config.telegram_updates_controller.logger
  end

  # In this case session will persist for user only in specific chat.
  # Same user in other chat will have different session.
  def session_key
    "#{bot.username}:#{chat['id']}:#{from['id']}" if chat && from
  end

  def attached_project
    current_user.available_projects.find_by(telegram_chat_id: chat['id'])
  end

  def current_bot_id
    bot.token.split(':').first
  end

  def telegram_user
    @telegram_user ||= TelegramUser
                       .create_with(chat.slice(*%w[first_name last_name username]))
                       .create_or_find_by! id: chat.fetch('id')
  end

  def notify_bugsnag(message)
    Rails.logger.err message
    Bugsnag.notify message do |b|
      b.metadata = payload
    end
  end
end
