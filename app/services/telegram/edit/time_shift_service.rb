# frozen_string_literal: true

module Telegram
  module Edit
    class TimeShiftService
      include Telegram::Concerns::PaginationConcern

      attr_reader :controller, :user

      def initialize(controller, user)
        @controller = controller
        @user = user
      end

      def show_time_shifts_list(page = 1)
        pagination_service = PaginationService.new(controller, user)
        result = pagination_service.get_paginated_time_shifts(page)

        if result[:time_shifts].empty?
          controller.respond_with :message, text: '–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
          return
        end

        table_formatter = TableFormatter.new(controller)
        text = table_formatter.format_time_shifts_table(result[:time_shifts], result[:pagination])

        pagination_service.save_pagination_context(result[:pagination])
        controller.save_context :edit_select_time_shift_input

        reply_markup = pagination_service.build_keyboard(result[:pagination])

        controller.respond_with :message,
                                text: controller.multiline(
                                  text,
                                  nil,
                                  '–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:'
                                ),
                                reply_markup:,
                                parse_mode: :Markdown
      end

      def handle_selection(time_shift_id)
        time_shift = find_time_shift(time_shift_id)

        unless time_shift
          controller.respond_with :message, text: "–ó–∞–ø–∏—Å—å —Å ID #{time_shift_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
          return
        end

        unless time_shift.updatable_by?(user)
          controller.respond_with :message, text: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏'
          return
        end

        # Save time shift to session using TelegramSession
        controller.telegram_session = TelegramSession.edit(
          time_shift_id: time_shift.id
        )

        controller.save_context :edit_field_callback_query
        show_field_selection(time_shift)
      end

      def handle_field_selection(field)
        if field == 'cancel'
          controller.clear_telegram_session
          controller.edit_message :text, text: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ'
          return
        end

        tg_session = controller.telegram_session
        tg_session[:field] = field
        controller.telegram_session = tg_session

        case field
        when 'project'
          show_project_selection
        when 'hours'
          show_hours_input
        when 'description'
          show_description_input
        end
      end

      def handle_project_selection(project_slug)
        project = find_project(project_slug)

        unless project
          controller.edit_message :text, text: '–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
          return
        end

        tg_session = controller.telegram_session
        tg_session[:new_values] = { project_id: project.id }
        controller.telegram_session = tg_session
        show_confirmation
      end

      def handle_hours_input(hours_str)
        hours = hours_str.to_s.tr(',', '.').to_f

        if hours < 0.1
          controller.respond_with :message, text: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 0.1. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:'
          return
        end

        tg_session = controller.telegram_session
        tg_session[:new_values] = { hours: hours }
        controller.telegram_session = tg_session
        show_confirmation
      end

      def handle_description_input(description)
        description = nil if description == '-'

        if description && description.length > 1000
          controller.respond_with :message, text: '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 1000 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:'
          return
        end

        tg_session = controller.telegram_session
        tg_session[:new_values] = { description: description }
        controller.telegram_session = tg_session
        show_confirmation
      end

      def handle_confirmation(action)
        if action == 'cancel'
          controller.clear_telegram_session
          controller.edit_message :text, text: '–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã'
          return
        end

        time_shift = controller.edit_time_shift
        unless time_shift
          controller.handle_missing_time_shift
          return
        end

        data = controller.telegram_session_data
        field = data['field']
        new_values = data['new_values']

        update_time_shift(time_shift, field, new_values)

        # Clean up session
        controller.clear_telegram_session
        controller.edit_message :text, text: "‚úÖ –ó–∞–ø–∏—Å—å ##{time_shift.id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!"
      rescue ActiveRecord::RecordInvalid => e
        controller.edit_message :text, text: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: #{e.message}"
      end

      private

      def find_time_shift(time_shift_id)
        user.time_shifts.find_by(id: time_shift_id)
      end

      def find_project(project_slug)
        user.available_projects.find_by(slug: project_slug)
      end

      def show_field_selection(time_shift)
        description = time_shift.description || '(–Ω–µ—Ç)'
        text = "–ó–∞–ø–∏—Å—å ##{time_shift.id}:\n" \
               "–ü—Ä–æ–µ–∫—Ç: #{time_shift.project.name}\n" \
               "–ß–∞—Å—ã: #{time_shift.hours}\n" \
               "–û–ø–∏—Å–∞–Ω–∏–µ: #{description}\n\n" \
               '–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?'

        controller.respond_with :message,
                                text: text,
                                reply_markup: {
                                  inline_keyboard: [
                                    [{ text: 'üìÅ –ü—Ä–æ–µ–∫—Ç', callback_data: 'edit_field:project' }],
                                    [{ text: '‚è∞ –ß–∞—Å—ã', callback_data: 'edit_field:hours' }],
                                    [{ text: 'üìù –û–ø–∏—Å–∞–Ω–∏–µ', callback_data: 'edit_field:description' }],
                                    [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'edit_field:cancel' }]
                                  ]
                                }
      end

      def show_project_selection
        time_shift = controller.edit_time_shift
        return unless time_shift

        controller.save_context :edit_project_callback_query
        projects = user.available_projects.alive

        text = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç (—Ç–µ–∫—É—â–∏–π: #{time_shift.project.name}):"

        inline_keyboard = projects.map do |p|
          project_name = p.id == time_shift.project_id ? "#{p.name} (—Ç–µ–∫—É—â–∏–π)" : p.name
          [{ text: project_name, callback_data: "edit_project:#{p.slug}" }]
        end

        controller.edit_message :text,
                                text: text,
                                reply_markup: { inline_keyboard: inline_keyboard }
      end

      def show_hours_input
        controller.save_context :edit_hours_input
        controller.edit_message :text, text: '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 8 –∏–ª–∏ 7.5):'
      end

      def show_description_input
        controller.save_context :edit_description_input
        controller.edit_message :text, text: '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "-" –¥–ª—è –ø—É—Å—Ç–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è):'
      end

      def show_confirmation
        time_shift = controller.edit_time_shift
        return unless time_shift

        data = controller.telegram_session_data
        field = data['field']
        new_values = data['new_values']

        changes = controller.build_changes_text(time_shift, field, new_values)

        controller.save_context :edit_confirm_callback_query

        controller.respond_with :message,
                                text: "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:\n\n#{changes.join("\n")}\n\n–°–æ—Ö—Ä–∞–Ω–∏—Ç—å?",
                                reply_markup: {
                                  inline_keyboard: [
                                    [{ text: '‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data: 'edit_confirm:save' }],
                                    [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'edit_confirm:cancel' }]
                                  ]
                                }
      end

      def update_time_shift(time_shift, field, new_values)
        case field
        when 'project'
          time_shift.update!(project_id: new_values['project_id'])
        when 'hours'
          time_shift.update!(hours: new_values['hours'])
        when 'description'
          time_shift.update!(description: new_values['description'])
        end
      end
    end
  end
end
