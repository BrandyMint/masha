# frozen_string_literal: true

class TelegramTimeTracker
  def initialize(user, message_parts, controller)
    @user = user
    @message_parts = message_parts
    @controller = controller
  end

  def parse_and_add
    return { error: '–Ø –Ω–µ –ê–ª–∏—Å–∞, –º–Ω–µ –Ω—É–∂–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞. –ñ–º–∏ /help' } if @message_parts.length < 2

    result = parse_time_tracking_message
    return result if result[:error]

    if result[:hours] && result[:project_slug]
      message = add_time_entry(result[:project_slug], result[:hours], result[:description])

      # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
      message = "#{message}\n\nüí° #{result[:suggestion]}" if result[:suggestion]

      @controller.respond_with :message, text: message
      { success: true }
    else
      { error: '–Ø –Ω–µ –ê–ª–∏—Å–∞, –º–Ω–µ –Ω—É–∂–Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–∞. –ñ–º–∏ /help' }
    end
  end

  private

  def parse_time_tracking_message
    first_part = @message_parts[0]
    second_part = @message_parts[1]
    description = @message_parts[2..].join(' ') if @message_parts.length > 2

    result = determine_hours_and_project(first_part, second_part)
    return result if result[:error]

    { hours: result[:hours], project_slug: result[:project_slug], description: description }
  end

  def determine_hours_and_project(first_part, second_part)
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
    available_slugs = available_projects_slugs

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –ø—Ä–æ–µ–∫—Ç–∞–º–∏
    first_is_project = available_slugs.include?(first_part)
    second_is_project = available_slugs.include?(second_part)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
    first_is_time = time_format?(first_part)
    second_is_time = time_format?(second_part)

    # –ö–µ–π—Å 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
    first_hours_out_of_range = first_is_time && time_out_of_range?(first_part)
    second_hours_out_of_range = second_is_time && time_out_of_range?(second_part)

    if first_hours_out_of_range || second_hours_out_of_range
      bad_time = first_hours_out_of_range ? first_part : second_part
      return handle_time_out_of_range(bad_time)
    end

    # –ö–µ–π—Å 2: –û–¥–Ω–æ–∑–Ω–∞—á–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    if first_is_time && second_is_project
      return { hours: first_part, project_slug: second_part }
    elsif first_is_project && second_is_time
      return { hours: second_part, project_slug: first_part }
    end

    # –ö–µ–π—Å 3: –û–±–∞ –º–æ–≥—É—Ç –±—ã—Ç—å –≤—Ä–µ–º–µ–Ω–µ–º - –∑–∞–ø—Ä–æ—Å —É—Ç–æ—á–Ω–µ–Ω–∏—è
    return handle_ambiguous_time(first_part, second_part) if first_is_time && second_is_time

    # –ö–µ–π—Å 3: –û–±–∞ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–æ–µ–∫—Ç–∞–º–∏ - –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    return handle_ambiguous_project(first_part, second_part) if first_is_project && second_is_project

    # –ö–µ–π—Å 4: –û–¥–∏–Ω –∏–∑ –Ω–∏—Ö –ø—Ä–æ–µ–∫—Ç, –¥—Ä—É–≥–æ–π –Ω–µ –≤—Ä–µ–º—è
    if first_is_project
      return { error: "–í—Ç–æ—Ä–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä '#{second_part}' –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ –≤—Ä–µ–º—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: 'project 2.5 –æ–ø–∏—Å–∞–Ω–∏–µ'" }
    elsif second_is_project
      return { error: "–ü–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä '#{first_part}' –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ –≤—Ä–µ–º—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: '2.5 project –æ–ø–∏—Å–∞–Ω–∏–µ'" }
    end

    # –ö–µ–π—Å 5: –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø—Ä–æ–µ–∫—Ç—ã —Å –æ–ø–µ—á–∞—Ç–∫–∞–º–∏
    first_project_fuzzy = find_project_fuzzy(first_part)
    second_project_fuzzy = find_project_fuzzy(second_part)

    if first_project_fuzzy && second_is_time
      return { hours: second_part, project_slug: first_project_fuzzy.slug,
               suggestion: "üí° –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É –ø—Ä–æ–µ–∫—Ç '#{first_project_fuzzy.slug}'?" }
    elsif second_project_fuzzy && first_is_time
      return { hours: first_part, project_slug: second_project_fuzzy.slug,
               suggestion: "üí° –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É –ø—Ä–æ–µ–∫—Ç '#{second_project_fuzzy.slug}'?" }
    end

    # –ö–µ–π—Å 5b: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–µ—á–∞—Ç–∫–∏ –¥–∞–∂–µ –µ—Å–ª–∏ –≤—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å –Ω–µ –≤—Ä–µ–º—è (–Ω–æ –ø–æ—Ö–æ–∂–∞ –Ω–∞ –≤—Ä–µ–º—è)
    if first_project_fuzzy && numeric?(second_part)
      hours = second_part.to_s.tr(',', '.').to_f
      if hours >= 0.1 && hours <= 24
        return { hours: second_part, project_slug: first_project_fuzzy.slug,
                 suggestion: "üí° –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É –ø—Ä–æ–µ–∫—Ç '#{first_project_fuzzy.slug}'?" }
      end
    elsif second_project_fuzzy && numeric?(first_part)
      hours = first_part.to_s.tr(',', '.').to_f
      if hours >= 0.1 && hours <= 24
        return { hours: first_part, project_slug: second_project_fuzzy.slug,
                 suggestion: "üí° –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É –ø—Ä–æ–µ–∫—Ç '#{second_project_fuzzy.slug}'?" }
      end
    end

    # –ö–µ–π—Å 6: –ù–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ - –ø–æ–¥—Ä–æ–±–Ω–∞—è –æ—à–∏–±–∫–∞
    handle_no_match(first_part, second_part)
  end

  def time_format?(str)
    return false unless str.is_a?(String)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
    return false unless str.match?(/\A\d+([.,]\d+)?\z/)

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
    hours = str.tr(',', '.').to_f
    hours.positive? && hours <= 100.0 # –ë–æ–ª–µ–µ —à–∏—Ä–æ–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –¥–∏–∞–ø–∞–∑–æ–Ω –ø—Ä–æ–≤–µ—Ä–∏–º –æ—Ç–¥–µ–ª—å–Ω–æ
  end

  def available_projects_slugs
    @available_projects_slugs ||= @user.available_projects.alive.pluck(:slug)
  end

  def find_project_fuzzy(slug)
    # –ò—â–µ–º –ø—Ä–æ–µ–∫—Ç —Å –æ–ø–µ—á–∞—Ç–∫–∞–º–∏ (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω–∞)
    available_projects = @user.available_projects.alive

    available_projects.find do |project|
      levenshtein_distance(slug.downcase, project.slug.downcase) <= 2
    end
  end

  def levenshtein_distance(str1, str2)
    # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –õ–µ–≤–µ–Ω—à—Ç–µ–π–Ω–∞
    matrix = Array.new(str1.length + 1) { Array.new(str2.length + 1) }

    (0..str1.length).each { |i| matrix[i][0] = i }
    (0..str2.length).each { |j| matrix[0][j] = j }

    (1..str1.length).each do |i|
      (1..str2.length).each do |j|
        cost = str1[i - 1] == str2[j - 1] ? 0 : 1
        matrix[i][j] = [
          matrix[i - 1][j] + 1,     # deletion
          matrix[i][j - 1] + 1,     # insertion
          matrix[i - 1][j - 1] + cost # substitution
        ].min
      end
    end

    matrix[str1.length][str2.length]
  end

  def handle_ambiguous_time(first_part, second_part)
    {
      error: multiline(
        '‚ùì –ù–µ –ø–æ–Ω—è–ª. –í—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É:',
        "‚Ä¢ #{first_part} —á–∞—Å–∞ –≤ –∫–∞–∫–æ–º –ø—Ä–æ–µ–∫—Ç–µ?",
        "‚Ä¢ #{second_part} —á–∞—Å–∞ –≤ –∫–∞–∫–æ–º –ø—Ä–æ–µ–∫—Ç–µ?",
        '',
        "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç: \"#{first_part} project\" –∏–ª–∏ \"#{second_part} project\""
      )
    }
  end

  def handle_ambiguous_project(first_part, second_part)
    {
      error: multiline(
        '‚ùì –ù–µ –ø–æ–Ω—è–ª. –í—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É:',
        "‚Ä¢ –ü—Ä–æ–µ–∫—Ç '#{first_part}' —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤?",
        "‚Ä¢ –ü—Ä–æ–µ–∫—Ç '#{second_part}' —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤?",
        '',
        "–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è: \"2.5 #{first_part}\" –∏–ª–∏ \"2.5 #{second_part}\""
      )
    }
  end

  def handle_no_match(first_part, second_part)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–µ—Ç –±—ã—Ç—å —ç—Ç–æ –≤—Ä–µ–º—è –Ω–æ —Å –æ—à–∏–±–∫–æ–π
    if numeric?(first_part) || numeric?(second_part)
      time_part = numeric?(first_part) ? first_part : second_part
      project_part = numeric?(first_part) ? second_part : first_part

      if numeric?(time_part)
        hours = time_part.to_s.tr(',', '.').to_f
        if hours < 0.1
          return { error: "–°–ª–∏—à–∫–æ–º –º–∞–ª–æ –≤—Ä–µ–º–µ–Ω–∏: #{hours}. –ú–∏–Ω–∏–º—É–º 0.1 —á–∞—Å–∞." }
        elsif hours > 24
          return { error: "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: #{hours}. –ú–∞–∫—Å–∏–º—É–º 24 —á–∞—Å–∞." }
        end
      end

      # –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ—Ö–æ–∂–∏–µ –ø—Ä–æ–µ–∫—Ç—ã
      similar_projects = find_similar_projects(project_part)
      if similar_projects.any?
        return {
          error: "–ù–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–æ–µ–∫—Ç '#{project_part}'. –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É: #{similar_projects.join(', ')}"
        }
      end

      # –í—Ä–µ–º—è –µ—Å—Ç—å, –Ω–æ –ø—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
      return { error: "–ù–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–æ–µ–∫—Ç '#{project_part}'. –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã: #{available_projects_slugs.join(', ')}" }
    end

    available_projects = available_projects_slugs.join(', ')
    {
      error: multiline(
        '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å—ã –∏ –ø—Ä–æ–µ–∫—Ç.',
        '',
        "–í—ã –≤–≤–µ–ª–∏: '#{first_part}' '#{second_part}'",
        '',
        '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:',
        '‚Ä¢ 2.5 project –æ–ø–∏—Å–∞–Ω–∏–µ',
        '‚Ä¢ project 2.5 –æ–ø–∏—Å–∞–Ω–∏–µ',
        '',
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã: #{available_projects}"
      )
    }
  end

  def find_similar_projects(slug)
    available_slugs = available_projects_slugs
    similar = available_slugs.select do |available_slug|
      levenshtein_distance(slug.downcase, available_slug.downcase) <= 2
    end
    similar.first(5) # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
  end

  def time_out_of_range?(str)
    return false unless str.is_a?(String)

    hours = str.tr(',', '.').to_f
    hours < 0.1 || hours > 24.0
  end

  def handle_time_out_of_range(time_str)
    hours = time_str.tr(',', '.').to_f
    if hours < 0.1
      { error: "–°–ª–∏—à–∫–æ–º –º–∞–ª–æ –≤—Ä–µ–º–µ–Ω–∏: #{hours}. –ú–∏–Ω–∏–º—É–º 0.1 —á–∞—Å–∞." }
    else
      { error: "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: #{hours}. –ú–∞–∫—Å–∏–º—É–º 24 —á–∞—Å–∞." }
    end
  end

  def multiline(*lines)
    lines.compact.join("\n")
  end

  def numeric?(str)
    return false unless str.is_a?(String)

    str.match?(/\A\d+([.,]\d+)?\z/)
  end

  def add_time_entry(project_slug, hours, description = nil)
    project = find_project(project_slug)

    hours_float = hours.to_s.tr(',', '.').to_f

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    warning_message = nil
    if hours_float > 12
      warning_message = " ‚ö†Ô∏è –ú–Ω–æ–≥–æ —á–∞—Å–æ–≤ –∑–∞ –¥–µ–Ω—å (#{hours_float})"
    elsif hours_float < 0.5
      warning_message = " ‚ÑπÔ∏è –ú–∞–ª–æ —á–∞—Å–æ–≤ (#{hours_float})"
    end

    project.time_shifts.create!(
      date: Time.zone.today,
      hours: hours_float,
      description: description || '',
      user: @user
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message_parts = ["‚úÖ –û—Ç–º–µ—Ç–∏–ª–∏ #{hours_float}—á –≤ –ø—Ä–æ–µ–∫—Ç–µ #{project.name}"]
    message_parts << warning_message if warning_message
    message_parts << "üìù #{description}" if description.present?

    message_parts.join("\n")
  rescue StandardError => e
    Rails.logger.error "Error adding time entry: #{e.message}"
    Rails.logger.error e.backtrace.join("\n")

    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏: #{e.message}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
  end

  def find_project(key)
    @user.available_projects.alive.find_by(slug: key)
  end
end
